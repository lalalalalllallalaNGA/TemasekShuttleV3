// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TemasekShuttleV3.Data;

#nullable disable

namespace TemasekShuttleV3.Migrations
{
    [DbContext(typeof(TemasekShuttleV3Context))]
    [Migration("20250206053751_SeedRole")]
    partial class SeedRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "023f7028-ebed-4d50-a0c7-fc232628a75c",
                            Name = "Jovan",
                            NormalizedName = "JOVAN"
                        },
                        new
                        {
                            Id = "f445a56e-14eb-4906-94d7-7af9e462dff9",
                            Name = "Zoey",
                            NormalizedName = "ZOEY"
                        },
                        new
                        {
                            Id = "b20b199c-9749-4f01-8b80-a5a174d9c502",
                            Name = "YuFeng",
                            NormalizedName = "YUFENG"
                        },
                        new
                        {
                            Id = "414788fe-9218-4ce0-a736-4d28d265fdf9",
                            Name = "Triston",
                            NormalizedName = "TRISTON"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "78c9271b-e508-4214-b105-b448185b1010",
                            RoleId = "023f7028-ebed-4d50-a0c7-fc232628a75c"
                        },
                        new
                        {
                            UserId = "363dd9c6-47c2-4759-bbfc-25701e3ff1049",
                            RoleId = "f445a56e-14eb-4906-94d7-7af9e462dff9"
                        },
                        new
                        {
                            UserId = "0b8ef920-dad6-4d01-9afa-78c3cb9d92b8",
                            RoleId = "b20b199c-9749-4f01-8b80-a5a174d9c502"
                        },
                        new
                        {
                            UserId = "18893c71-425e-426e-8cc5-13f24d3fdc3f",
                            RoleId = "414788fe-9218-4ce0-a736-4d28d265fdf9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TemasekShuttleV3.Data.TemasekShuttleV3User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4de46a1f-761c-4002-9fee-1cccb6c5bfd5",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFPVnuNyDrM14X6/2QQWkw6Gb3NvVrYb0ZKyti7eiE47bN4jFcjHNk0OTx99lQt+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7a9ccc7-2c66-40c5-bdaa-39d3aad5d15c",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "78c9271b-e508-4214-b105-b448185b1010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "459328df-3736-4ff8-a763-12a71afb9840",
                            Email = "jovan@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Jovan",
                            LastName = "Driver",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOVAN@LOCALHOST.COM",
                            NormalizedUserName = "JOVAN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJWXmglXPn5EgMa77+A3J9iESFe/KXgPEavO5TdjMKSuCRQEI9qRWl0yUU8locZhfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4630c4af-21a2-452f-b4f7-5e9567be8ad0",
                            TwoFactorEnabled = false,
                            UserName = "jovan@localhost.com"
                        },
                        new
                        {
                            Id = "363dd9c6-47c2-4759-bbfc-25701e3ff1049",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fe2a6f9-46a4-4ff6-9fd9-f1f717637d65",
                            Email = "zoey@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Zoey",
                            LastName = "Driver",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZOEY@LOCALHOST.COM",
                            NormalizedUserName = "ZOEY@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEObINWoQfrIVMo+520vy9CuA/+JWSW1osaugZ0dHDsXng7o2x+uB+tMqMp4m0rtVCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6baee1b-762d-41ae-9783-03331b51c0d2",
                            TwoFactorEnabled = false,
                            UserName = "zoey@localhost.com"
                        },
                        new
                        {
                            Id = "0b8ef920-dad6-4d01-9afa-78c3cb9d92b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92a4a8d3-e2a7-4baf-a7d4-5d5750709532",
                            Email = "yufeng@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "YuFeng",
                            LastName = "Driver",
                            LockoutEnabled = false,
                            NormalizedEmail = "YUFENG@LOCALHOST.COM",
                            NormalizedUserName = "YUFENG@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJv/mZDHEdEKNtC+sWwccleXivXikK9+p7SSR63T5XuL8gqfyKQjPPlRBZI0UhnLSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1ee0daf-a1a2-4a46-b1d3-db2ac2f7be91",
                            TwoFactorEnabled = false,
                            UserName = "yufeng@localhost.com"
                        },
                        new
                        {
                            Id = "18893c71-425e-426e-8cc5-13f24d3fdc3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0f39542-d3eb-479c-9aef-743c4d53a7b7",
                            Email = "Triston@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Triston",
                            LastName = "Driver",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRISTON@LOCALHOST.COM",
                            NormalizedUserName = "TRISTON@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIh0u5L35W0zC+Z439E14MvTyYzJtRaniUJTztbFG6xUrr/2kMImx9kRBuigTPKy7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46b881cf-9318-4579-8de1-167cd2a4f98d",
                            TwoFactorEnabled = false,
                            UserName = "triston@localhost.com"
                        });
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BusTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleOccurrenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusCapacity")
                        .HasColumnType("int");

                    b.Property<string>("BusPlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusCapacity = 40,
                            BusPlate = "SA4B1G3R"
                        },
                        new
                        {
                            Id = 2,
                            BusCapacity = 40,
                            BusPlate = "PM0T7J9D"
                        });
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DriverContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Driver");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DriverContact = "81234567",
                            DriverName = "Jovan"
                        },
                        new
                        {
                            Id = 2,
                            DriverContact = "91234567",
                            DriverName = "Zoey"
                        },
                        new
                        {
                            Id = 3,
                            DriverContact = "85234891",
                            DriverName = "Yu Feng"
                        },
                        new
                        {
                            Id = 4,
                            DriverContact = "98257845",
                            DriverName = "Triston"
                        });
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("FeedbackContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeedbackRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentAmountId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniquePaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.PaymentAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("NonpeakPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PeakPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PaymentAmount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NonpeakPrice = 1.50m,
                            PeakPrice = 2.50m
                        });
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BusScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BusScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DriverDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DriverTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScheduleLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpareDriver")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusScheduleDate = new DateTime(2025, 8, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            BusScheduleTime = new DateTime(2025, 8, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverDate = new DateTime(2025, 8, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 0,
                            DriverTime = new DateTime(2025, 8, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleLocation = "Tampines East MRT Exit C",
                            SpareDriver = ""
                        },
                        new
                        {
                            Id = 2,
                            BusScheduleDate = new DateTime(2025, 8, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            BusScheduleTime = new DateTime(2025, 8, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverDate = new DateTime(2025, 8, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = 0,
                            DriverTime = new DateTime(2025, 8, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleLocation = "Punggol MRT Exit A",
                            SpareDriver = ""
                        });
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.ScheduleOccurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BusScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BusScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScheduleOccurrence");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusScheduleDate = new DateTime(2025, 2, 6, 13, 37, 50, 699, DateTimeKind.Local).AddTicks(5011),
                            BusScheduleTime = new DateTime(2025, 2, 6, 13, 37, 50, 699, DateTimeKind.Local).AddTicks(5022),
                            ScheduleId = 0
                        },
                        new
                        {
                            Id = 2,
                            BusScheduleDate = new DateTime(2025, 2, 6, 13, 37, 50, 699, DateTimeKind.Local).AddTicks(5024),
                            BusScheduleTime = new DateTime(2025, 2, 6, 13, 37, 50, 699, DateTimeKind.Local).AddTicks(5024),
                            ScheduleId = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TemasekShuttleV3.Data.TemasekShuttleV3User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TemasekShuttleV3.Data.TemasekShuttleV3User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemasekShuttleV3.Data.TemasekShuttleV3User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TemasekShuttleV3.Data.TemasekShuttleV3User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
