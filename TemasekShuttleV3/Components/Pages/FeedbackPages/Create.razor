@page "/feedbacks/create"
@using Microsoft.EntityFrameworkCore
@using TemasekShuttleV3.Domain
@inject IDbContextFactory<TemasekShuttleV3.Data.TemasekShuttleV3Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Feedback</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Feedback" OnValidSubmit="AddFeedback" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="feedbackrating" class="form-label">FeedbackRating:</label> 
                <InputNumber id="feedbackrating" @bind-Value="Feedback.FeedbackRating" class="form-control" /> 
                <ValidationMessage For="() => Feedback.FeedbackRating" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="feedbackcontent" class="form-label">FeedbackContent:</label> 
                <InputText id="feedbackcontent" @bind-Value="Feedback.FeedbackContent" class="form-control" /> 
                <ValidationMessage For="() => Feedback.FeedbackContent" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="bookingid" class="form-label">BookingId:</label> 
                <InputNumber id="bookingid" @bind-Value="Feedback.BookingId" class="form-control" /> 
                <ValidationMessage For="() => Feedback.BookingId" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/feedbacks">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Feedback Feedback { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddFeedback()
    {
        using var context = DbFactory.CreateDbContext();
        context.Feedback.Add(Feedback);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/feedbacks");
    }
}
