// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TemasekShuttleV3.Data;

#nullable disable

namespace TemasekShuttleV3.Migrations
{
    [DbContext(typeof(TemasekShuttleV3Context))]
    [Migration("20250209155749_n")]
    partial class n
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "cc929e90-2902-4d56-b9b3-663d1acba20f",
                            Name = "driver",
                            NormalizedName = "DRIVER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "78c9271b-e508-4214-b105-b448185b1010",
                            RoleId = "cc929e90-2902-4d56-b9b3-663d1acba20f"
                        },
                        new
                        {
                            UserId = "363dd9c6-47c2-4759-bbfc-25701e3ff1049",
                            RoleId = "cc929e90-2902-4d56-b9b3-663d1acba20f"
                        },
                        new
                        {
                            UserId = "0b8ef920-dad6-4d01-9afa-78c3cb9d92b8",
                            RoleId = "cc929e90-2902-4d56-b9b3-663d1acba20f"
                        },
                        new
                        {
                            UserId = "18893c71-425e-426e-8cc5-13f24d3fdc3f",
                            RoleId = "cc929e90-2902-4d56-b9b3-663d1acba20f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TemasekShuttleV3.Data.TemasekShuttleV3User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "013921a2-39de-4074-b772-a14ce48bb0b3",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENT979GaGn/NFjRR2xlGYob+i/Wb64KKfh8vWV0g5Euav41l9HF75Med/stR70Vxkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a62d1f1-329e-4a1a-83aa-aaaec5e4060d",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "78c9271b-e508-4214-b105-b448185b1010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca0239ab-25f8-4f75-aefd-813b67de6673",
                            Email = "jovan@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Jovan",
                            LastName = "Driver",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOVAN@LOCALHOST.COM",
                            NormalizedUserName = "JOVAN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELHyKN0smtepGNwHcg1wfqJPANVZgIipeL7JBD6m0IekdYrf/pC4MSMtcSndf7cqnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d04cccb-1518-4a79-9b28-80ed680644d8",
                            TwoFactorEnabled = false,
                            UserName = "jovan@localhost.com"
                        },
                        new
                        {
                            Id = "363dd9c6-47c2-4759-bbfc-25701e3ff1049",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf51e55f-c562-4a63-8032-7e417e7f9698",
                            Email = "zoey@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Zoey",
                            LastName = "Driver",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZOEY@LOCALHOST.COM",
                            NormalizedUserName = "ZOEY@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENyc0XDTZ+fZzwSws3aiUXoM2Lg7Q9etE//COZ/StN95zt0hCtPlJn1aquIJW77PCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5549bf3-226a-4c5c-80a0-5820afdda245",
                            TwoFactorEnabled = false,
                            UserName = "zoey@localhost.com"
                        },
                        new
                        {
                            Id = "0b8ef920-dad6-4d01-9afa-78c3cb9d92b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4aaee80d-d7a5-49b7-b386-e1a5887b6595",
                            Email = "yufeng@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "YuFeng",
                            LastName = "Driver",
                            LockoutEnabled = false,
                            NormalizedEmail = "YUFENG@LOCALHOST.COM",
                            NormalizedUserName = "YUFENG@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPuucr5XK8/2pBe4cefVI9fAB4qhOJufWMsopRsfandvnGmKIEnqDImGawwhA/truw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e8ec676-9a51-4756-98f4-ca8670110de7",
                            TwoFactorEnabled = false,
                            UserName = "yufeng@localhost.com"
                        },
                        new
                        {
                            Id = "18893c71-425e-426e-8cc5-13f24d3fdc3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b77b9ec-2276-4fb3-8b5a-05dae1bf8c52",
                            Email = "Triston@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Triston",
                            LastName = "Driver",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRISTON@LOCALHOST.COM",
                            NormalizedUserName = "TRISTON@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENGgy/rkcm9rlAzN+Cle8cKkaX0m7vZesvDmrvJ6u7Q6tFwlQPP8D7eLwjAlbpqiEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7879c6be-8e73-40c8-b5c4-1b4eb3b18ec8",
                            TwoFactorEnabled = false,
                            UserName = "triston@localhost.com"
                        });
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BusDate")
                        .HasColumnType("date");

                    b.Property<string>("BusLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("BusTime")
                        .HasColumnType("time");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleOccurrenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusCapacity")
                        .HasColumnType("int");

                    b.Property<string>("BusPlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusCapacity = 40,
                            BusPlate = "SA4B1G3R"
                        },
                        new
                        {
                            Id = 2,
                            BusCapacity = 40,
                            BusPlate = "PM0T7J9D"
                        });
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerRN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DriverContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Driver");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DriverContact = "81234567",
                            DriverName = "Jovan"
                        },
                        new
                        {
                            Id = 2,
                            DriverContact = "91234567",
                            DriverName = "Zoey"
                        },
                        new
                        {
                            Id = 3,
                            DriverContact = "85234891",
                            DriverName = "Yu Feng"
                        },
                        new
                        {
                            Id = 4,
                            DriverContact = "98257845",
                            DriverName = "Triston"
                        });
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("FeedbackContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeedbackRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentAmountId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniquePaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.PaymentAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("NonpeakPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PeakPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PaymentAmount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NonpeakPrice = 1.50m,
                            PeakPrice = 2.50m
                        });
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BusScheduleDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("BusScheduleTime")
                        .HasColumnType("time");

                    b.Property<DateOnly>("DriverDate")
                        .HasColumnType("date");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("DriverTime")
                        .HasColumnType("time");

                    b.Property<string>("ScheduleLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpareDriver")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusScheduleDate = new DateOnly(2025, 8, 18),
                            BusScheduleTime = new TimeOnly(8, 0, 0),
                            DriverDate = new DateOnly(2025, 8, 18),
                            DriverId = 1,
                            DriverTime = new TimeOnly(8, 0, 0),
                            ScheduleLocation = "Tampines East MRT Exit C"
                        },
                        new
                        {
                            Id = 2,
                            BusScheduleDate = new DateOnly(2025, 8, 18),
                            BusScheduleTime = new TimeOnly(8, 0, 0),
                            DriverDate = new DateOnly(2025, 8, 18),
                            DriverId = 2,
                            DriverTime = new TimeOnly(8, 0, 0),
                            ScheduleLocation = "Punggol MRT Exit A"
                        });
                });

            modelBuilder.Entity("TemasekShuttleV3.Domain.ScheduleOccurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BusScheduleDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("BusScheduleTime")
                        .HasColumnType("time");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScheduleOccurrence");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusScheduleDate = new DateOnly(2025, 8, 18),
                            BusScheduleTime = new TimeOnly(8, 0, 0),
                            ScheduleId = 1
                        },
                        new
                        {
                            Id = 2,
                            BusScheduleDate = new DateOnly(2025, 8, 18),
                            BusScheduleTime = new TimeOnly(8, 0, 0),
                            ScheduleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TemasekShuttleV3.Data.TemasekShuttleV3User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TemasekShuttleV3.Data.TemasekShuttleV3User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemasekShuttleV3.Data.TemasekShuttleV3User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TemasekShuttleV3.Data.TemasekShuttleV3User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
