@page "/customers/create"
@using Microsoft.EntityFrameworkCore
@using TemasekShuttleV3.Domain
@inject IDbContextFactory<TemasekShuttleV3.Data.TemasekShuttleV3Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Customer</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Customer" OnValidSubmit="AddCustomer" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="customername" class="form-label">CustomerName:</label> 
                <InputText id="customername" @bind-Value="Customer.CustomerName" class="form-control" /> 
                <ValidationMessage For="() => Customer.CustomerName" class="text-danger" /> 
            </div>    
            
            <div class="mb-3"hidden>
                <label for="CustomerId" class="form-label">CustomerId:</label>
                <div id="CustomerId" class="form-control">
                    @Customer.CustomerContact
                </div>
                <ValidationMessage For="() => Customer.CustomerName" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="customercontact" class="form-label">CustomerContact:</label> 
                <InputText id="customercontact" @bind-Value="Customer.CustomerContact" class="form-control" /> 
                <ValidationMessage For="() => Customer.CustomerContact" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/customers">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Customer Customer { get; set; } = new();

    protected override void OnInitialized()
    {
        Customer.CustomerContact  = GenerateRandomUniquePaymentId();
    }

    private string? GenerateRandomUniquePaymentId()
    {
        Random random = new Random();

        int randomNumber = random.Next(10000000, 99999999); // Generates a random 8-digit number
        return randomNumber.ToString(); // Convert the integer to string
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddCustomer()
    {
        using var context = DbFactory.CreateDbContext();
        context.Customer.Add(Customer);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/customers");
    }
}
